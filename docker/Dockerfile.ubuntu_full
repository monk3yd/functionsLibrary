# FROM public.ecr.aws/ubuntu/ubuntu:22.04_stable
FROM public.ecr.aws/ubuntu/ubuntu:20.04_stable

ENV TZ=America/Santiago
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Core
RUN apt-get update && apt-get install -y \
    build-essential \
    g++ \
    make \
    cmake \
    unzip \
    libcurl4-openssl-dev \
    python3-pip \
    libgl1-mesa-glx \
    libglib2.0-0 \
    zbar-tools \
    poppler-utils \
    tesseract-ocr \
    libtesseract-dev

# Dependencies drivers
RUN apt-get update && apt-get install -y \
    libxkbcommon-x11-0 \
    libwayland-server0 \
    libwayland-egl1 \
    libepoxy-dev \
    libsoup2.4-dev \
    libgstreamer1.0-0 \
    libopus-dev \
    libharfbuzz-icu0 \
    libicu66 \
    libicu-dev \
    libxslt-dev \
    libwoff1 \
    libgstreamer-plugins-base1.0-dev \
    libwebp-dev \
    libwebpdemux2

RUN apt-get update && apt-get install -y --no-install-recommends \
    libnss3 \
    libxss1 \
    libasound2 \
    fonts-noto-color-emoji \
    libxtst6 \
    git \
    ssh

RUN mkdir -p /home/app

# Image dependencies
RUN pip3 install Pillow --upgrade --target /home/app
# RUN pip3 install pytesseract==0.3.9 --upgrade --target /home/app 
RUN pip3 install pytesseract==0.3.9 --upgrade --target /home/app 
RUN pip3 install opencv-python==4.6.0.66 --upgrade --target /home/app 
RUN pip3 install pyzbar==0.1.9 --upgrade --target /home/app 

# PDF
RUN pip3 install pdfplumber==0.7.3 --upgrade --target /home/app 
RUN pip3 install pdf2image==1.16.0 --upgrade --target /home/app 
# RUN pip3 install poppler-utils --upgrade --target ${FUNCTION_DIR}

# --- Install handler & modules dependencies
# Playwright dependencies
RUN pip3 install playwright==1.22.0
RUN python3 -m playwright install
RUN python3 -m playwright install-deps

COPY app.py /home/app
COPY utils.py /home/app 

# Install Lambda Runtime Interface Client for Python
RUN python3 -m pip install awslambdaric 

# Stage 3 - final runtime image
# FROM public.ecr.aws/docker/library/archlinux:latest

# Include global arg in this stage of the build
# ARG FUNCTION_DIR

WORKDIR /home/app 

# Copy in the built dependencies
# COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

# (Optional) Add Lambda Runtime Interface Emulator and use a script in the ENTRYPOINT for simpler local runs
ADD https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie /usr/bin/aws-lambda-rie
COPY entry.sh /
RUN chmod 755 /usr/bin/aws-lambda-rie /entry.sh
ENTRYPOINT [ "/entry.sh" ]

CMD [ "app.lambda_handler" ]
